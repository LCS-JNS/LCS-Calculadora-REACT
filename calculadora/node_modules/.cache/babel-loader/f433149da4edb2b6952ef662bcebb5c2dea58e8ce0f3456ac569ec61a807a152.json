{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\conta\\\\Documents\\\\LCS-Calculadora-REACT\\\\calculadora\\\\src\\\\main\\\\Calculator.jsx\";\nimport React, { Component } from \"react\";\nimport './Calculator.css';\nimport Button from \"../components/Button\";\nimport Display, { setErrorVisibility } from \"../components/Display\";\n\n/*\r\n    PreSet: configuração inicial padrão da calculadora.\r\n        displayValue: valor a ser mostrado no display.\r\n        minus: indica se o número atual do display possúi símbolo negativo\r\n        clearDisplay: verificador, se deve ou não se limpar o display.\r\n        operation: aqui ficará salvo a operação a ser realizada.\r\n        values: guardará o valor1 e o valor2 da operação.\r\n        current: armazena qual posição do vetor deve ser manipulada no momento.\r\n        numpad: indica se o teclado numérico está desbloqueado ou não.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst preSet = {\n  displayValue: '0',\n  minus: false,\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0,\n  numpad: true\n};\nexport default class Calculator extends Component {\n  constructor() {\n    super(...arguments);\n    // State da calcluladora passa a ser o \"preSet\".\n    this.state = {\n      ...preSet\n    };\n    this.blockNums = () => {\n      let numButtons = document.querySelectorAll('Button');\n      numButtons = [...numButtons];\n      let noOperators = [];\n      numButtons.forEach(item => {\n        if (!item.classList.contains('operator')) {\n          noOperators.push(item);\n        }\n      });\n      noOperators.forEach(btn => {\n        if (!this.state.numpad) {\n          btn.disabled = true;\n        } else {\n          btn.disabled = false;\n        }\n      });\n    };\n  }\n  /* \r\n      clearMemory(): função do botão \"C\" que reseta a calculadora.\r\n      Ela é assíncrona pois a função \"setErrorVisibility\" necessita do state atualizado após o \"setState\",\r\n      se o \"setState\" não tiver \"await\", a função \"setErrorVisibility\" vai pegar as informações do state ainda não atualizadas.\r\n      Por fim, se chama a função \"blockNums\" que irá destravar os botões caso eles estejam travados antes de apertar em \"C\".\r\n  */\n  async clearMemory() {\n    // Aguarda a finalização de \"this.setState({ ...preSet })\".\n    await this.setState({\n      ...preSet\n    });\n\n    // Remove a marca de erro \"E\" do topo da calculadora.\n    setErrorVisibility(false);\n\n    // Desbloqueia o teclado.\n    this.blockNums();\n  }\n\n  /*\r\n      A fução \"setOperation\" irá receber a operação do botão pressionado (pegando a lable do botão).\r\n      Ela também é assíncrona pois utiliza dos mesmos casos da \"clearMemory\".\r\n  */\n  async setOperation(op) {\n    /*\r\n        A função \"setOperation\" passa por 2 etapas. Na primeira, o \"current\" é 0, o que indica que\r\n        devemos apenas armazenar a operação, limpar o display, desbloquear o teclado numéricopara caso ele esteja bloqueado)\r\n        e passar o \"current\" para 1, assim sinalizando que queremos inserir o segundo valor da operação.\r\n        Depois, aplicar o desbloqueio do teclado numérico.\r\n    */\n\n    // Verifica o \"current\".\n    if (this.state.current === 0) {\n      // Aguarda a atualização do state.\n      await this.setState({\n        operation: op,\n        current: 1,\n        clearDisplay: true,\n        numpad: true\n      });\n\n      // Após o state ser atualizado, desbloqueia o teclado numérico.\n      this.blockNums();\n    } else {\n      // Caso o \"current\" seja 1\n\n      /*\r\n          No caso de estarmos já no \"current\" 1, isso significa que já temos o \"valor1\" e \"valor2\" armazenados em \"values[0, 0]\".\r\n          Ou seja, o programa ja pode realizar a operação\r\n      */\n\n      // Salva-se a operação que havia sido selecionada quando o valor1 foi inserido. \n      const currentOperation = this.state.operation;\n\n      /*\r\n          Verifica se a operação atual foi \"=\", pois ele usa uma lógica diferente das outras operações.\r\n          Caso o \"=\" seja pressionado, isso indica que o usuário quer pegar o resultado da operação\r\n          e não concatenará para a próxima operação, que é o que se acontece caso use qualquer outro operador.\r\n      */\n      let equals = op === '=';\n\n      // Salva em uma constante \"values\" os valores já inseridos\n      const values = [...this.state.values];\n\n      // Salta em uma variável o string do primeiro valor inserido.\n      let displayValue = values[0] + '';\n\n      // Realiza um try/catch para driblar bugs do \"eval()\"\n      try {\n        /*\r\n            Como o operador é passada por meio da lable do botão, não é possível jogar a operação \"%\"\r\n            diretamente dentro do \"eval\", por que \"%\" em programação significa \"resto da divisão\",\r\n            como eu queria que \"%\" realizasse a porcentagem, essa operação teve de ser feita a parte.\r\n        */\n\n        // Verifica se o operador da operação é \"%\".\n        if (currentOperation === '%') {\n          // Pega o operando que vai ser a parte.\n          const porcentage = values[0];\n\n          // Pega o operando que indica o total.\n          const value = values[1];\n\n          // Realiza a operação de porcentagem.\n          values[0] = porcentage / 100 * value;\n\n          // Caso o operador não seja \"%\" realiza o \"eval\"\n        } else {\n          // Atribui ao primeiro valor da lista \"values[0, 0]\" o resultado da operação\n          values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\n        }\n\n        // Transforma este novo valor em string novamente\n        displayValue = '15354.153551486524';\n        //values[0] + ''\n\n        /*\r\n            Aqui acontece algo importante. No decorrer do programa, caso o tamanho de um número\r\n            seja maior que o limite do display (13), ele exibe \"too Big.\", porém, caso seja um número com virgula\r\n            e o número após a vírgula for muito grande, se é cortado no mínimo dos números após a vírgula para que \r\n            o número a ser exibido no display, seja de tamanho max 13.\r\n              Exemplo: \r\n                  resultado = 15354.153551486524\r\n                  Este número contém 17 caractéres sem contar o \".\", ou seja, seria considerado \"too Big.\"\r\n                Mas para que isso não aconteça, o número poderia ser arredondado para \"15354.15355149\"\r\n                permitindo assim que o número seja exibido\r\n        */\n\n        if (displayValue.includes('.')) {\n          const splitedValue = displayValue.split('.');\n          let preDotValue = splitedValue[0];\n          let postDotValue = splitedValue[1];\n          let preDotValueLength = preDotValue.length;\n          if (preDotValue.includes('-')) {\n            preDotValueLength--;\n          }\n          if (preDotValueLength >= 13) {\n            displayValue = 'too Big';\n          } else {\n            let countTotal = preDotValueLength;\n            let totalSpaceRest = 13 - countTotal;\n            let roundedPostDotValue = postDotValue.substring(0, totalSpaceRest);\n            if (totalSpaceRest < postDotValue.length) {\n              let lastTwoNums = postDotValue.substring(totalSpaceRest - 2, totalSpaceRest - 1);\n              console.log(lastTwoNums);\n              const lastNumPostDotValue = parseInt(roundedPostDotValue.charAt(roundedPostDotValue.length - 1));\n              if (lastNumPostDotValue >= 5) {}\n            }\n            postDotValue += '';\n            displayValue = `${preDotValue}.${postDotValue.substring(0, totalSpaceRest)}`;\n          }\n        }\n        if (isNaN(values[0] || !isFinite(values[0]))) {\n          this.clearMemory();\n          return;\n        }\n      } catch (e) {\n        values[0] = this.state.values[0];\n      }\n      values[1] = 0;\n      const sign = Math.sign(values[0]);\n      let minus = false;\n      if (sign === -1) {\n        minus = true;\n      }\n      let current = equals ? 0 : 1;\n      let displayValueLength = this.getActualLength(displayValue);\n      if (displayValueLength > 13 && (displayValue > 9999999999999 || displayValue < -9999999999999 || displayValue.match('[a-z, 0-9]'))) {\n        await this.setState({\n          numpad: true\n        });\n        this.blockNums();\n        displayValue = 'too Big.';\n        equals = false;\n        current = 0;\n      } else if (this.state.numpad) {\n        this.blockNums();\n      }\n      this.setState({\n        displayValue: displayValue,\n        operation: equals ? null : op,\n        current,\n        clearDisplay: !equals,\n        values,\n        minus\n      });\n    }\n  }\n  async addDigit(n) {\n    let displayValue = this.state.displayValue;\n    if ((displayValue === '0' || displayValue === '-0') && (n === '0' || n === '0')) {\n      return;\n    }\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return;\n    }\n    if (displayValue === '0' || displayValue === '-0') {\n      if (displayValue === '0') {\n        displayValue = '';\n      } else {\n        displayValue = '-';\n      }\n    }\n    let minus = this.state.minus;\n    let clearDisplay = this.state.clearDisplay;\n    if (clearDisplay) {\n      displayValue = n;\n      clearDisplay = false;\n      if (minus) {\n        minus = false;\n      }\n    } else {\n      displayValue += n;\n    }\n    this.updateError(displayValue);\n    let displayValueLength = this.getActualLength(displayValue);\n    if (displayValueLength === 13) {\n      await this.setState({\n        numpad: false\n      });\n      this.blockNums();\n    } else {\n      await this.setState({\n        numpad: true\n      });\n      this.blockNums();\n    }\n    this.setState({\n      displayValue,\n      clearDisplay,\n      minus\n    });\n    if (n !== '.') {\n      this.insertNumber(displayValue);\n    }\n  }\n  setMinus() {\n    const minus = this.state.minus;\n    let displayValue = this.state.displayValue;\n    if (minus) {\n      displayValue = displayValue.replace('-', '');\n      this.setState({\n        displayValue,\n        minus: false\n      });\n    } else {\n      displayValue = '-' + displayValue;\n      this.setState({\n        displayValue,\n        minus: true\n      });\n    }\n    this.insertNumber(displayValue);\n  }\n  async bs() {\n    let displayValue = this.state.displayValue;\n    if (displayValue === '0') {\n      return;\n    }\n    if (displayValue.length === 1) {\n      displayValue = '0';\n    } else {\n      displayValue = displayValue.substring(0, displayValue.length - 1);\n    }\n    this.setState({\n      displayValue\n    });\n    this.insertNumber(displayValue);\n    this.updateError(displayValue);\n    await this.setState({\n      numpad: true\n    });\n    this.blockNums();\n  }\n  render() {\n    const addDigit = n => this.addDigit(n);\n    const setOperation = op => this.setOperation(op);\n    const setMinus = () => this.setMinus();\n    const bs = () => this.bs();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: this.state.displayValue,\n        minus: this.state.minus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"C\",\n        operator: true,\n        click: () => this.clearMemory()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"%\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"/\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"\\u232B\",\n        operator: true,\n        click: bs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"7\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"8\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"9\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"*\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"4\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"5\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"6\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"-\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"1\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"2\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"3\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"+\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"\\xB1\",\n        click: setMinus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"0\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \".\",\n        click: addDigit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        lable: \"=\",\n        operator: true,\n        click: setOperation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this);\n  }\n  insertNumber(displayValue) {\n    const i = this.state.current;\n    const newValue = parseFloat(displayValue);\n    const values = [...this.state.values];\n    values[i] = newValue;\n    this.setState({\n      values\n    });\n  }\n  updateError(displayValue) {\n    let displayValueLength = this.getActualLength(displayValue);\n    if (displayValueLength >= 13) {\n      setErrorVisibility(true);\n    } else {\n      setErrorVisibility(false);\n    }\n  }\n  getActualLength(displayValue) {\n    let displayValueLength = displayValue.length;\n    if (displayValue.includes('-')) {\n      displayValueLength--;\n    }\n    if (displayValue.includes('.')) {\n      displayValueLength--;\n    }\n    return displayValueLength;\n  }\n}","map":{"version":3,"names":["React","Component","Button","Display","setErrorVisibility","jsxDEV","_jsxDEV","preSet","displayValue","minus","clearDisplay","operation","values","current","numpad","Calculator","constructor","arguments","state","blockNums","numButtons","document","querySelectorAll","noOperators","forEach","item","classList","contains","push","btn","disabled","clearMemory","setState","setOperation","op","currentOperation","equals","porcentage","value","eval","includes","splitedValue","split","preDotValue","postDotValue","preDotValueLength","length","countTotal","totalSpaceRest","roundedPostDotValue","substring","lastTwoNums","console","log","lastNumPostDotValue","parseInt","charAt","isNaN","isFinite","e","sign","Math","displayValueLength","getActualLength","match","addDigit","n","updateError","insertNumber","setMinus","replace","bs","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","lable","operator","click","i","newValue","parseFloat"],"sources":["C:/Users/conta/Documents/LCS-Calculadora-REACT/calculadora/src/main/Calculator.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport './Calculator.css'\r\n\r\nimport Button from \"../components/Button\";\r\nimport Display, { setErrorVisibility } from \"../components/Display\";\r\n\r\n/*\r\n    PreSet: configuração inicial padrão da calculadora.\r\n        displayValue: valor a ser mostrado no display.\r\n        minus: indica se o número atual do display possúi símbolo negativo\r\n        clearDisplay: verificador, se deve ou não se limpar o display.\r\n        operation: aqui ficará salvo a operação a ser realizada.\r\n        values: guardará o valor1 e o valor2 da operação.\r\n        current: armazena qual posição do vetor deve ser manipulada no momento.\r\n        numpad: indica se o teclado numérico está desbloqueado ou não.\r\n*/\r\nconst preSet = {\r\n    displayValue: '0',\r\n    minus: false,\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0,\r\n    numpad: true\r\n}\r\n\r\n\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    // State da calcluladora passa a ser o \"preSet\".\r\n    state = { ...preSet }\r\n\r\n    /* \r\n        clearMemory(): função do botão \"C\" que reseta a calculadora.\r\n        Ela é assíncrona pois a função \"setErrorVisibility\" necessita do state atualizado após o \"setState\",\r\n        se o \"setState\" não tiver \"await\", a função \"setErrorVisibility\" vai pegar as informações do state ainda não atualizadas.\r\n        Por fim, se chama a função \"blockNums\" que irá destravar os botões caso eles estejam travados antes de apertar em \"C\".\r\n    */\r\n    async clearMemory() {\r\n\r\n        // Aguarda a finalização de \"this.setState({ ...preSet })\".\r\n        await this.setState({ ...preSet })\r\n\r\n        // Remove a marca de erro \"E\" do topo da calculadora.\r\n        setErrorVisibility(false)\r\n\r\n        // Desbloqueia o teclado.\r\n        this.blockNums()\r\n    }\r\n\r\n    /*\r\n        A fução \"setOperation\" irá receber a operação do botão pressionado (pegando a lable do botão).\r\n        Ela também é assíncrona pois utiliza dos mesmos casos da \"clearMemory\".\r\n    */\r\n    async setOperation(op) {\r\n\r\n        /*\r\n            A função \"setOperation\" passa por 2 etapas. Na primeira, o \"current\" é 0, o que indica que\r\n            devemos apenas armazenar a operação, limpar o display, desbloquear o teclado numéricopara caso ele esteja bloqueado)\r\n            e passar o \"current\" para 1, assim sinalizando que queremos inserir o segundo valor da operação.\r\n            Depois, aplicar o desbloqueio do teclado numérico.\r\n        */\r\n\r\n        // Verifica o \"current\".\r\n        if(this.state.current === 0) {\r\n\r\n            // Aguarda a atualização do state.\r\n            await this.setState({ operation: op, current: 1, clearDisplay: true, numpad: true})\r\n\r\n            // Após o state ser atualizado, desbloqueia o teclado numérico.\r\n            this.blockNums()\r\n\r\n        } else { // Caso o \"current\" seja 1\r\n\r\n            /*\r\n                No caso de estarmos já no \"current\" 1, isso significa que já temos o \"valor1\" e \"valor2\" armazenados em \"values[0, 0]\".\r\n                Ou seja, o programa ja pode realizar a operação\r\n            */\r\n\r\n            // Salva-se a operação que havia sido selecionada quando o valor1 foi inserido. \r\n            const currentOperation = this.state.operation\r\n\r\n            /*\r\n                Verifica se a operação atual foi \"=\", pois ele usa uma lógica diferente das outras operações.\r\n                Caso o \"=\" seja pressionado, isso indica que o usuário quer pegar o resultado da operação\r\n                e não concatenará para a próxima operação, que é o que se acontece caso use qualquer outro operador.\r\n            */\r\n            let equals = op === '='\r\n\r\n            // Salva em uma constante \"values\" os valores já inseridos\r\n            const values = [...this.state.values]\r\n\r\n            // Salta em uma variável o string do primeiro valor inserido.\r\n            let displayValue = values[0] + ''\r\n\r\n            // Realiza um try/catch para driblar bugs do \"eval()\"\r\n            try {\r\n\r\n                /*\r\n                    Como o operador é passada por meio da lable do botão, não é possível jogar a operação \"%\"\r\n                    diretamente dentro do \"eval\", por que \"%\" em programação significa \"resto da divisão\",\r\n                    como eu queria que \"%\" realizasse a porcentagem, essa operação teve de ser feita a parte.\r\n                */\r\n                \r\n                // Verifica se o operador da operação é \"%\".\r\n                if(currentOperation === '%') {\r\n\r\n                    // Pega o operando que vai ser a parte.\r\n                    const porcentage = values[0]\r\n                    \r\n                    // Pega o operando que indica o total.\r\n                    const value = values[1]\r\n\r\n                    // Realiza a operação de porcentagem.\r\n                    values[0] = (porcentage / 100) * value\r\n\r\n                    // Caso o operador não seja \"%\" realiza o \"eval\"\r\n                } else {\r\n\r\n                    // Atribui ao primeiro valor da lista \"values[0, 0]\" o resultado da operação\r\n                    values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n\r\n                }\r\n\r\n                // Transforma este novo valor em string novamente\r\n                displayValue = '15354.153551486524'\r\n                //values[0] + ''\r\n\r\n                /*\r\n                    Aqui acontece algo importante. No decorrer do programa, caso o tamanho de um número\r\n                    seja maior que o limite do display (13), ele exibe \"too Big.\", porém, caso seja um número com virgula\r\n                    e o número após a vírgula for muito grande, se é cortado no mínimo dos números após a vírgula para que \r\n                    o número a ser exibido no display, seja de tamanho max 13.\r\n\r\n                    Exemplo: \r\n\r\n                        resultado = 15354.153551486524\r\n\r\n                        Este número contém 17 caractéres sem contar o \".\", ou seja, seria considerado \"too Big.\"\r\n                        Mas para que isso não aconteça, o número poderia ser arredondado para \"15354.15355149\"\r\n                        permitindo assim que o número seja exibido\r\n                */\r\n\r\n\r\n                if(displayValue.includes('.')) {\r\n                    const splitedValue = displayValue.split('.')\r\n                    let preDotValue = splitedValue[0]\r\n                    let postDotValue = splitedValue[1]\r\n                    let preDotValueLength = preDotValue.length\r\n                    if(preDotValue.includes('-')) {\r\n                        preDotValueLength--\r\n                    }\r\n                    if(preDotValueLength >= 13) {\r\n                        displayValue = 'too Big'\r\n                    } else {\r\n                        let countTotal = preDotValueLength\r\n                        let totalSpaceRest = 13 - countTotal \r\n                        let roundedPostDotValue = postDotValue.substring(0, totalSpaceRest)      \r\n                        if(totalSpaceRest < postDotValue.length) {\r\n                            let lastTwoNums = postDotValue.substring(totalSpaceRest - 2, totalSpaceRest - 1)\r\n                            console.log(lastTwoNums)\r\n                            const lastNumPostDotValue = parseInt(roundedPostDotValue.charAt(roundedPostDotValue.length - 1))\r\n                            if(lastNumPostDotValue >= 5) {\r\n                                \r\n                            }                         \r\n                        }\r\n                        postDotValue += ''\r\n                        displayValue = `${preDotValue}.${postDotValue.substring(0, totalSpaceRest)}`\r\n                    \r\n                    }\r\n                }\r\n                if(isNaN(values[0] || !isFinite(values[0]))) {\r\n                    this.clearMemory()\r\n                    return\r\n                }\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]\r\n            }\r\n            values[1] = 0\r\n            const sign = Math.sign(values[0]) \r\n            let minus = false\r\n\r\n            if(sign === -1) {\r\n                minus = true\r\n            }\r\n            let current = equals ? 0 : 1\r\n            let displayValueLength = this.getActualLength(displayValue)\r\n            if(displayValueLength > 13 && (displayValue > 9999999999999 || displayValue < -9999999999999 || displayValue.match('[a-z, 0-9]')) ) {\r\n                await this.setState({ numpad: true })\r\n                this.blockNums()\r\n                displayValue = 'too Big.'\r\n                equals = false;\r\n                current = 0\r\n            } else if(this.state.numpad) {\r\n                this.blockNums()\r\n            }\r\n\r\n            this.setState({\r\n                displayValue: displayValue,\r\n                operation: equals ? null : op,\r\n                current,\r\n                clearDisplay: !equals,\r\n                values,\r\n                minus\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    async addDigit(n) {\r\n        \r\n        let displayValue = this.state.displayValue\r\n        \r\n        if((displayValue === '0' || displayValue === '-0') && (n === '0' || n === '0')) {\r\n            return\r\n        }\r\n        if(n === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n\r\n        if(displayValue === '0' || displayValue === '-0') {\r\n            if(displayValue === '0') {\r\n                displayValue = ''\r\n            } else {\r\n                displayValue = '-'\r\n            }\r\n        }\r\n\r\n        let minus = this.state.minus\r\n        let clearDisplay = this.state.clearDisplay\r\n        if(clearDisplay) {\r\n            displayValue = n\r\n            clearDisplay = false\r\n            if(minus) {\r\n                minus = false\r\n            }\r\n        } else {\r\n            displayValue += n\r\n        }\r\n        \r\n        \r\n        this.updateError(displayValue)\r\n        let displayValueLength = this.getActualLength(displayValue)\r\n        if(displayValueLength === 13) {\r\n            await this.setState({ numpad: false })\r\n            this.blockNums()\r\n        } else {\r\n            await this.setState({ numpad: true })\r\n            this.blockNums()\r\n        }\r\n        \r\n        this.setState({ displayValue, clearDisplay, minus })\r\n        if(n !== '.') {\r\n            this.insertNumber(displayValue)\r\n        }\r\n    }\r\n\r\n    setMinus() {\r\n        const minus = this.state.minus\r\n        let displayValue = this.state.displayValue\r\n        \r\n        if(minus) {\r\n            displayValue = displayValue.replace('-', '')\r\n            this.setState({ displayValue, minus: false })\r\n        } else {\r\n            displayValue = '-' + displayValue\r\n            this.setState({ displayValue, minus: true })\r\n        }\r\n        this.insertNumber(displayValue)\r\n    }\r\n\r\n    async bs() {\r\n        let displayValue = this.state.displayValue\r\n        if(displayValue === '0') {\r\n            return\r\n        } if(displayValue.length === 1) {\r\n            displayValue = '0'\r\n        } else {\r\n            displayValue = displayValue.substring(0, displayValue.length - 1)\r\n        }\r\n        this.setState({ displayValue })\r\n        this.insertNumber(displayValue)\r\n        this.updateError(displayValue)\r\n        await this.setState({ numpad: true })\r\n        this.blockNums()\r\n    }\r\n\r\n    render() {\r\n        const addDigit = n => this.addDigit(n)\r\n        const setOperation = op => this.setOperation(op)\r\n        const setMinus = () => this.setMinus()\r\n        const bs = () => this.bs()\r\n\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} minus={this.state.minus} />\r\n                <Button lable='C' operator click={() => this.clearMemory()}/>\r\n                <Button lable='%' operator  click={setOperation}/>\r\n                <Button lable='/' operator click={setOperation}/>\r\n                <Button lable='⌫' operator click={bs}/>\r\n                <Button lable='7' click={addDigit}/>\r\n                <Button lable='8' click={addDigit}/>\r\n                <Button lable='9' click={addDigit}/>\r\n                <Button lable='*' operator click={setOperation}/>\r\n                <Button lable='4' click={addDigit}/>\r\n                <Button lable='5' click={addDigit}/>\r\n                <Button lable='6' click={addDigit}/>\r\n                <Button lable='-' operator click={setOperation}/>\r\n                <Button lable='1' click={addDigit}/>\r\n                <Button lable='2' click={addDigit}/>\r\n                <Button lable='3' click={addDigit}/>\r\n                <Button lable='+' operator click={setOperation}/>\r\n                <Button lable='±' click={setMinus}/> \r\n                <Button lable='0' click={addDigit}/>\r\n                <Button lable='.' click={addDigit}/>\r\n                <Button lable='=' operator click={setOperation}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    insertNumber(displayValue) {\r\n        const i = this.state.current\r\n        const newValue = parseFloat(displayValue)\r\n        const values = [...this.state.values]\r\n        values[i] = newValue\r\n        this.setState({ values })\r\n    }\r\n\r\n    updateError(displayValue) {\r\n        let displayValueLength = this.getActualLength(displayValue)\r\n        \r\n        if(displayValueLength >= 13) {\r\n            setErrorVisibility(true)\r\n        } else {\r\n            setErrorVisibility(false)\r\n        }\r\n    }\r\n\r\n    blockNums = () => {\r\n        let numButtons = document.querySelectorAll('Button')\r\n        numButtons = [...numButtons]\r\n        let noOperators = []\r\n        numButtons.forEach(item => {\r\n            if(!item.classList.contains('operator')) {\r\n                noOperators.push(item)\r\n            }\r\n        })\r\n        \r\n        noOperators.forEach(btn => {\r\n            if(!this.state.numpad) {\r\n                btn.disabled = true\r\n            } else {\r\n                btn.disabled = false\r\n            }\r\n        })\r\n    }\r\n\r\n    getActualLength(displayValue) {\r\n        let displayValueLength = displayValue.length\r\n        if(displayValue.includes('-')) {\r\n            displayValueLength--\r\n        }\r\n        if(displayValue.includes('.')) {\r\n            displayValueLength--\r\n        }\r\n        return displayValueLength\r\n    }\r\n}  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}